{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}

() recv_internal() {
}

cell search(int hash, cell tree) asm """
    SAMEALTSAVE
    AGAIN:<{
        s1 s0 PUSH2
        HASHCU
        EQUAL
        IFJMP:<{ 1 RETURNARGS RETALT }>

        CTOS
        DUP
        SREFS
        REPEAT:<{ LDREF s2 s(-1) PUXC }>
        DROP2

        DEPTH
        IFNOT:<{ c4 PUSH RETALT }>
    }>
""";

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {
    return search(hash, tree);
}

;; (cell) find_branch_by_hash(int hash, cell tree) method_id {
;;     tuple stack = cons(tree, null());
;;     do {
;;         ( cell c, stack ) = uncons(stack);
;;         if (c.cell_hash() == hash) {
;;             return c;
;;         }
;;         slice s = c.begin_parse();
;;         repeat (s.slice_refs()) {
;;             stack = cons(s~load_ref(), stack);
;;         }
;;     } until (stack.null?());
;;     return begin_cell().end_cell();
;; }
