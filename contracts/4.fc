{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

tuple make_table(int, int) asm """
    ZERO 90 INT REPEAT:<{ DUP INC }>
    92 s() PUSH
    92 s() PUSH
    BLKSWX
    91 INT 31 INT REPEAT:<{ DUP INC }>
    124 s() PUSH
    124 s() PUSH
    BLKSWX
    123 INT 131 INT REPEAT:<{ DUP INC }>
    255 INT TUPLEVAR
    2 1 BLKDROP2
""";

cell rotate(int shift, cell text) inline {
    int i = shift % 26;
    ifnot (i) {
        return text;
    }
    int j = 26 - i;
    tuple table = make_table(i, j);

    slice s = text.begin_parse();
    int n = 0;
    tuple chain = null();
    builder b = begin_cell();
    b = b.store_uint(s~load_uint(32), 32);

    do {
        ( int bits, int refs ) = s.slice_bits_refs();
        repeat (bits / 8) {
            int char = s~load_uint(8);
            b = b.store_uint(table.at(char), 8);
        }
        if (refs) {
            s = s~load_ref().begin_parse();
            n += 1;
            chain = cons(b, chain);
            b = begin_cell();
        }
    } until (refs == 0);

    cell c = b.end_cell();
    repeat (n) {
        ( b, chain ) = uncons(chain);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    return rotate(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    return rotate(- shift, text);
}
