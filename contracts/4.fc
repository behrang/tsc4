{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

cell rotate(int shift, cell text) inline {
    slice s = text.begin_parse();
    int n = 0;
    tuple chain = empty_tuple();
    builder b = begin_cell();
    b = b.store_uint(s~load_uint(32), 32);

    int stop? = false;
    do {
        ( int bits, int refs ) = s.slice_bits_refs();
        repeat (bits / 8) {
            int char = s~load_uint(8);
            if ((char >= 65) & (char <= 90)) {
                char = ((char - 65 + shift) % 26) + 65;
            } elseif ((char >= 97) & (char <= 122)) {
                char = ((char - 97 + shift) % 26) + 97;
            }
            b = b.store_uint(char, 8);
        }
        if (refs) {
            s = s~load_ref().begin_parse();
            n += 1;
            chain = cons(b, chain);
            b = begin_cell();
        } else {
            stop? = true;
        }
    } until (stop?);

    cell c = b.end_cell();
    repeat (n) {
        ( b, chain ) = uncons(chain);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    return rotate(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    return rotate(- shift, text);
}
