{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

const int A = "A"u;
const int Z = "Z"u;
const int a = "a"u;
const int z = "z"u;

tuple generate(int, int) asm "25 INT REPEAT:<{ DUP INC }> 26 INT ROLLX DUP 26 INT SUBR BLKSWX 26 INT TUPLEVAR";

cell rotate(int shift, cell text) inline {
    shift %= 26;
    tuple us = generate(shift, A);
    tuple ls = generate(shift, a);

    slice s = text.begin_parse();
    tuple chain = null();
    builder b = begin_cell();
    b = b.store_uint(s~load_uint(32), 32);

    int stop? = false;
    do {
        ( int bits, int refs ) = s.slice_bits_refs();
        repeat (bits / 8) {
            int char = s~load_uint(8);
            if ((char >= A) & (char <= Z)) {
                char = us.at(char - A);
            } elseif ((char >= a) & (char <= z)) {
                char = ls.at(char - a);
            }
            b = b.store_uint(char, 8);
        }
        if (refs) {
            s = s~load_ref().begin_parse();
            chain = cons(b, chain);
            b = begin_cell();
        } else {
            stop? = true;
        }
    } until (stop?);

    cell c = b.end_cell();
    while (~ chain.null?()) {
        ( b, chain ) = uncons(chain);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    return rotate(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    return rotate(- shift, text);
}
